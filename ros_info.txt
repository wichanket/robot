ROS Master:

ROS Master เป็นส่วนกลางของระบบ ROS ที่ใช้ในการจัดการและควบคุมการเชื่อมต่อระหว่างโหนด (nodes) ในระบบ
หน้าที่หลักของ ROS Master คือเก็บข้อมูลเกี่ยวกับโหนดทั้งหมดในระบบ เช่น ชื่อของโหนด (node), ที่อยู่ IP และพอร์ตของโหนด เป็นต้น
ROS Master ช่วยให้โหนดสามารถค้นหาและเชื่อมต่อกับโหนดอื่น ๆ ในระบบได้ โดยใช้ชื่อที่ลงทะเบียนกับ ROS Master เพื่อสื่อสารกันระหว่างโหนด
ROS Topics:

ROS Topics เป็นช่องทางสื่อสารแบบแพร่เผย (publish-subscribe) ในระบบ ROS
โหนดสามารถเผยแพร่ข้อมูลไปยัง Topic หรือสมัครเป็นผู้ฟังข้อมูลจาก Topic ได้
โหนดที่เผยแพร่ข้อมูลใน Topic จะเป็นผู้ส่ง (publisher) ข้อมูล และโหนดที่สมัครเป็นผู้ฟังข้อมูลจะเป็นผู้รับ (subscriber) ข้อมูล
Topic ใช้ในการสื่อสารแบบ asynchronous ซึ่งหมายความว่าผู้ส่งข้อมูลไม่ต้องรอให้ผู้รับรับข้อมูลทันที แต่ผู้รับจะได้รับข้อมูลเมื่อมีการเผยแพร่ข้อมูลใน Topic

หน้าที่ของ ROS Service ได้แก่:

การกำหนดและลงทะเบียน Service:

โหนดที่ต้องการให้บริการทำการกำหนดและลงทะเบียน Service ที่มีชื่อและรูปแบบข้อมูลที่เหมาะสม
ROS Master เป็นผู้รับผิดชอบในการจัดเก็บข้อมูลเกี่ยวกับ Service ที่ลงทะเบียนในระบบ
การส่งคำร้องขอ (Request) และรับการตอบกลับ (Response):

โหนดที่ต้องการให้บริการสร้างและส่งคำร้องขอไปยัง Service ที่ต้องการ พร้อมกับข้อมูลที่จำเป็น
โหนดที่ให้บริการรับคำร้องขอ และประมวลผลคำร้องขอด้วยวิธีการที่กำหนดไว้
โหนดที่ส่งคำร้องขอรอรับการตอบกลับจาก Service และนำผลลัพธ์ที่ได้มาใช้งานต่อไป
การเผยแพร่และสมัครเป็นผู้ให้บริการ:

เมื่อโหนดต้องการให้บริการทาง Service กับโหนดอื่น ๆ ในระบบ ROS โหนดนั้นจะเผยแพร่ข้อมูลเกี่ยวกับ Service ให้รู้จัก
โหนดอื่น ๆ ที่สนใจใช้งาน Service นี้จะสมัครเป็นผู้ให้บริการ เพื่อรอรับคำร้องขอจาก

ใน ROS, Topic และ Message เป็นสององค์ประกอบสำคัญในการสื่อสารระหว่างโหนด (nodes) ในระบบ ROS แต่มีความแตกต่างกันดังนี้:

Topic:

Topic เป็นช่องทางสื่อสารแบบแพร่เผย (publish-subscribe) ในระบบ ROS
Topic มีบทบาทในการเผยแพร่ข้อมูลจากโหนดส่ง (publisher) ไปยังโหนดรับ (subscriber)
โหนดสามารถเผยแพร่ข้อมูลไปยัง Topic หรือสมัครเป็นผู้ฟังข้อมูลจาก Topic ได้
การสื่อสารผ่าน Topic เป็นแบบไม่ร้อยขั้น (asynchronous) ซึ่งหมายความว่าโหนดสามารถเผยแพร่ข้อมูลได้โดยไม่ต้องรอให้โหนดรับข้อมูลทันที
Topic ถูกใช้ในสถานการณ์ที่ต้องการเผยแพร่ข้อมูลให้กับโหนดหลายๆ โหนด ที่สนใจในข้อมูลนั้น ๆ และโหนดที่รับข้อมูลสามารถเลือกที่จะรับหรือไม่รับข้อมูลได้ตามต้องการ
Message:

Message เป็นโครงสร้างข้อมูลที่ใช้ในการแลกเปลี่ยนข้อมูลระหว่างโหนดในระบบ ROS
Message เป็นโครงสร้างข้อมูลที่กำหนดโดยระบบ ROS หรือผู้ใช้งานเอง และมีรูปแบบที่ถูกกำหนดล่วงหน้าในไฟล์ .msg
โหนดสามารถสร้างข้อมูลในรูปแบบของ Message และส่งให้กับโหนดอื่น ๆ ผ่าน Topic
Message เป็นข้อมูลที่อยู่ในรูปแบบที่ถูกกำหนดโดย Message Definition ซึ่งอาจประกอบไปด้วยฟิลด์ (fields) ที่เก็บข้อมูลต่าง ๆ

ในเชิงการใช้งานของ ROS, มีความแตกต่างดังนี้:

การแบ่งแยกภารกิจ (Task Partitioning): ROS ช่วยให้ผู้พัฒนาสามารถแบ่งแยกภารกิจในระบบอัตโนมัติเพื่อทำงานแบบครึ่งเครื่อง (distributed computing) โดยโหนด (nodes) แต่ละตัวสามารถทำงานในภารกิจที่แยกต่างหากได้ และสามารถแบ่งงานกันเพื่อเพิ่มประสิทธิภาพและกระจายภารกิจในระบบได้อย่างมีประสิทธิภาพ

ระบบแบบหลายสหสัมพันธ์ (Multi-master system): ROS สามารถใช้งานในรูปแบบระบบหลายสหสัมพันธ์ได้ ที่ควบคุมโดยมีมาสเตอร์ (master) แยกต่างหากในแต่ละสหสัมพันธ์ นี่ช่วยให้โครงสร้างระบบซับซ้อนและการทำงานในมาตรฐานต่างๆ สามารถรวมกันได้อย่างยืดหยุ่น

ระบบสื่อสารแบบแพร่เผย (Publish-Subscribe): ROS ใช้โครงสร้างการสื่อสารแบบแพร่เผย (publish-subscribe) ซึ่งช่วยให้โหนดสามารถส่งข้อมูลไปยัง Topic และโหนดอื่น ๆ ที่สนใจในข้อมูลนั้น ๆ สามารถสมัครเป็นผู้รับข้อมูลจาก Topic เพื่อรับข้อมูลเมื่อมีการเผยแพร่ข้อมูลใน Topic นั้น

บริการ (Services): ROS มีการสนับสนุนระบบบริการ (services) ซึ่งช่วยให้โหนดสามารถร้องขอบริการจากโหนดอื่น ๆ และรับการตอบกลับ
